#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –°–∞–ª–∏–∫–æ–≤–æ–π –û–ª—å–≥–∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω—ã
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 30.09.2025
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, Document, PhotoSize
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
try:
    from config import BOT_TOKEN, TEACHER_CODE
    from database import Database
    from utils.keyboards import (
        get_main_menu, get_teacher_menu, get_student_menu,
        get_groups_keyboard, get_homework_keyboard, get_schedule_keyboard,
        get_back_keyboard, get_grade_keyboard, get_days_keyboard
    )
    from utils.helpers import (
        is_teacher, format_homework_list, format_schedule,
        validate_time_format, is_valid_file_type, format_file_size
    )
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TeacherStates(StatesGroup):
    waiting_for_teacher_code = State()
    creating_group = State()
    adding_student_to_group = State()
    adding_homework = State()
    adding_homework_description = State()
    adding_homework_due_date = State()
    setting_grade = State()
    creating_schedule = State()
    setting_schedule_time = State()

class StudentStates(StatesGroup):
    submitting_homework = State()
    messaging_classmate = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = Path("uploads")
UPLOAD_DIR.mkdir(exist_ok=True)

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(user_id, username, first_name, last_name)
    
    welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç!</b> üåü

üë©‚Äçüè´ <b>–°–∞–ª–∏–∫–æ–≤–∞ –û–ª—å–≥–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞</b>
üá¨üáß –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞

<i>–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –±–æ–ª–µ–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º!</i>

‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤:</b>
üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø –∏ –æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏
üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–¥–∞—á–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
üìÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
‚≠ê –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —É—á–µ–Ω–∏–∫–æ–≤
üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
üìä –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
üó∫Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:
"""
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu()
    )

@router.callback_query(F.data == "role_student")
async def select_student_role(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        "üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É—á–µ–Ω–∏–∫!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üë• –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ üìù –í—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ üìÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n"
        "‚Ä¢ üí¨ –û–±—â–∞—Ç—å—Å—è —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_student_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "role_teacher")
async def select_teacher_role(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    await state.set_state(TeacherStates.waiting_for_teacher_code)
    await callback.message.edit_text(
        "üë©‚Äçüè´ <b>–í—Ö–æ–¥ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n"
        "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
        "–≤–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥:",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()

@router.message(TeacherStates.waiting_for_teacher_code)
async def check_teacher_code(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if message.text == TEACHER_CODE:
        user_id = message.from_user.id
        await db.set_user_role(user_id, 'teacher')
        await state.clear()
        
        await message.answer(
            "‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –û–ª—å–≥–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞!</b>\n\n"
            "üéØ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —É—á–µ–Ω–∏–∫–æ–≤\n"
            "üìö –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π\n"
            "‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫\n"
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_teacher_menu()
        )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞!</b>\n\n"
            "üîë –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n"
            "–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∫–æ–¥, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "my_groups")
async def show_my_groups(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –≥—Ä—É–ø–ø—ã"""
    user_id = callback.from_user.id
    groups = await db.get_user_groups(user_id)
    
    if groups:
        text = "üë• <b>–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:</b>\n\n"
        for group in groups:
            text += f"üìö <b>{group['name']}</b>\n"
            text += f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group['member_count']}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {group['created_at'][:10]}\n\n"
        
        text += "üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>"
        keyboard = get_groups_keyboard(groups)
    else:
        text = (
            "üòî <b>–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>\n\n"
            "üë©‚Äçüè´ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –û–ª—å–≥–µ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–µ –¥–ª—è\n"
            "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞\n"
            "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.\n\n"
            "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑\n"
            "—ç—Ç–æ—Ç –±–æ—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏."
        )
        keyboard = get_back_keyboard("back_to_student")
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("group_"))
async def show_group_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[1])
    group_info = await db.get_group_info(group_id)
    members = await db.get_group_members(group_id)
    
    if not group_info:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    text = f"üìö <b>{group_info['name']}</b>\n\n"
    text += "üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:</b>\n"
    
    for i, member in enumerate(members, 1):
        name = f"{member['first_name']} {member['last_name']}".strip()
        if not name:
            name = f"@{member['username']}" if member['username'] else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member['user_id']}"
        text += f"{i}. {name}\n"
    
    text += f"\nüìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(members)}</b>\n"
    text += f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group_info['created_at'][:10]}"
    
    keyboard = get_groups_keyboard([group_info], show_members=True)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()