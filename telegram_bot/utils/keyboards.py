#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë©‚Äçüéì –Ø —É—á–µ–Ω–∏–∫", callback_data="role_student")],
        [InlineKeyboardButton(text="üë©‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")]
    ])
    return keyboard

def get_student_menu():
    """–ú–µ–Ω—é —É—á–µ–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="my_groups")],
        [InlineKeyboardButton(text="üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="my_homework")],
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="my_schedule")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_teacher_menu():
    """–ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", callback_data="manage_groups")],
        [InlineKeyboardButton(text="üìù –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="manage_homework")],
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="manage_schedule")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_statistics")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_groups_keyboard(groups, is_teacher=False, show_members=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    keyboard = []
    
    if is_teacher:
        keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group")])
        
        for group in groups:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìö {group['name']} ({group['member_count']} —á–µ–ª.)",
                    callback_data=f"manage_group_{group['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_teacher")])
    else:
        for group in groups:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìö {group['name']}",
                    callback_data=f"group_{group['id']}"
                )
            ])
        
        if show_members:
            keyboard.append([InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_group_message")])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_student")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_homework_keyboard(homework_list, is_teacher=False, detailed=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    keyboard = []
    
    if is_teacher:
        keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_homework")])
        
        for hw in homework_list[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            status_emoji = "‚úÖ" if hw.get('submission_count', 0) > 0 else "üìù"
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{status_emoji} {hw['title'][:30]}{'...' if len(hw['title']) > 30 else ''}",
                    callback_data=f"hw_manage_{hw['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_teacher")])
    else:
        for hw in homework_list[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            status_emoji = "‚úÖ" if hw['status'] == 'submitted' else "üìù"
            grade_text = f" ({hw['grade']}/5)" if hw['grade'] else ""
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{status_emoji} {hw['title'][:25]}{'...' if len(hw['title']) > 25 else ''}{grade_text}",
                    callback_data=f"homework_{hw['id']}"
                )
            ])
        
        if detailed:
            keyboard.append([InlineKeyboardButton(text="üìé –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="submit_homework")])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_student")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_schedule_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", callback_data="schedule_week")],
        [InlineKeyboardButton(text="üìÜ –ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="schedule_next_week")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_student")]
    ])
    return keyboard

def get_back_keyboard(callback_data="back_to_main"):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])
    return keyboard

def get_grade_keyboard(homework_id, user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1", callback_data=f"grade_{homework_id}_{user_id}_1"),
            InlineKeyboardButton(text="2", callback_data=f"grade_{homework_id}_{user_id}_2"),
            InlineKeyboardButton(text="3", callback_data=f"grade_{homework_id}_{user_id}_3"),
            InlineKeyboardButton(text="4", callback_data=f"grade_{homework_id}_{user_id}_4"),
            InlineKeyboardButton(text="5", callback_data=f"grade_{homework_id}_{user_id}_5")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_homework")]
    ])
    return keyboard

def get_days_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
    days = [
        ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1), ("–í—Ç–æ—Ä–Ω–∏–∫", 2), ("–°—Ä–µ–¥–∞", 3),
        ("–ß–µ—Ç–≤–µ—Ä–≥", 4), ("–ü—è—Ç–Ω–∏—Ü–∞", 5), ("–°—É–±–±–æ—Ç–∞", 6), ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", 7)
    ]
    keyboard = []
    for day_name, day_num in days:
        keyboard.append([InlineKeyboardButton(text=day_name, callback_data=f"day_{day_num}")])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_teacher")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)