#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

from datetime import datetime, timedelta
from config import TEACHER_CODE
from database import Database

db = Database()

async def is_teacher(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"""
    user = await db.get_user(user_id)
    return user and user['role'] == 'teacher'

def format_homework_list(homework_list, is_teacher=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    if not homework_list:
        return "üìù <b>–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>"

    text = "üìù <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"

    for hw in homework_list:
        status_emoji = "‚úÖ" if hw['status'] == 'submitted' else "üìù"
        if is_teacher:
            status_emoji = "‚úÖ" if hw.get('submission_count', 0) > 0 else "üìù"

        text += f"{status_emoji} <b>{hw['title']}</b>\n"
        text += f"üìÖ –°—Ä–æ–∫: {hw['due_date'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"

        if hw.get('grade'):
            text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {hw['grade']}/5\n"
        elif hw['status'] == 'submitted':
            text += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏\n"

        text += "\n"

    return text

def format_schedule(schedule):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    if not schedule:
        return "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ</b>"

    days = ["", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    text = "üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"

    current_day = None
    for entry in schedule:
        if entry['day_of_week'] != current_day:
            current_day = entry['day_of_week']
            text += f"üìÖ <b>{days[current_day]}</b>\n"

        text += f"‚è∞ {entry['time']} - {entry['subject']}"
        if entry['group_name']:
            text += f" (–≥—Ä—É–ø–ø–∞: {entry['group_name']})"
        text += f" ({entry['duration']} –º–∏–Ω)\n"

    return text

def get_current_week_dates():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏"""
    today = datetime.now()
    days = []

    # –ù–∞–π—Ç–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    monday = today - timedelta(days=today.weekday())

    for i in range(7):
        day = monday + timedelta(days=i)
        days.append(day.strftime("%d.%m.%Y"))

    return days

def validate_time_format(time_str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

def get_file_extension(filename):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return filename.split('.')[-1].lower() if '.' in filename else ''

def is_valid_file_type(filename):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞"""
    allowed_extensions = ['pdf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png', 'zip']
    return get_file_extension(filename) in allowed_extensions

def format_file_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    if size_bytes < 1024:
        return f"{size_bytes} –±–∞–π—Ç"
    elif size_bytes < 1024**2:
        return f"{size_bytes/1024:.1f} –ö–ë"
    else:
        return f"{size_bytes/(1024**2):.1f} –ú–ë"